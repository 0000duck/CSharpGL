{
  "name": "CSharpGL",
  "tagline": "Object-Oriented Modern OpenGL Wrapper in C#",
  "body": "# :art:Welcome to CSharpGL\r\n[CSharpGL @ nuget](https://www.nuget.org/packages/CSharpGL) \r\n\r\n[CSharpGL](https://github.com/bitzhuwei/CSharpGL) is a pure C# project that allows for modern OpenGL rendering in an Object-Oriented way. It meets common requirements in OpenGL rendering such as:\r\n## :rocket:Modern Rendering\r\nObject-Oriented modern rendering using GLSL shaders and vertex buffer objects.\r\n![modern-rendering](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/modern-rendering.jpg?raw=true)\r\n## :stars:GLCanvas\r\nA winform control that supports drag-drop and wraps initialization of creating OpenGL context.\r\n![raycast-volume-rendering](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/GLCanvas.gif?raw=true)\r\n## :car:Uniform Variables\r\nstructs support setting values for uniform variables in GLSL shader.\r\n![edit-uniform-value](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/edit-uniform-value.jpg?raw=true)\r\n## :cancer:GLSwitch\r\nWraps OpenGL commands like \r\n```\r\nglEnable(GL_BLEND);\r\nglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_DST_ALPHA);\r\n...\r\nglDisable(GL_BLEND);\r\n```\r\nor\r\n``glLineWidth(2.0f);``\r\n![GLSwitch](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/GLSwitch.jpg?raw=true)\r\n## :pushpin:Color-Coded Picking\r\nPickableRenderer supports picking primitives in multiple vertex buffer objects using Mouse.  \r\n![pick and move primitive](http://images2015.cnblogs.com/blog/383191/201605/383191-20160503191610388-117673971.gif)\r\n## :abcd::curly_loop::ideograph_advantage:GLControl & Text\r\nRendering 'Control' at fixed position with fixed size. For example, GLAxis renders an axis at left bottom corner.\r\n'Control' binding to specified border just like winform-control.\r\nRendering text using ``glRasterPos()`` and ``CallList()``.\r\nRendering text using GLText(a special GLControl).\r\n![GLText and GLAxis](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/GLText-GLAxis.jpg?raw=true)\r\n\r\nLoad True Type Font File(*.ttf or *.otf) to build a texture filled with glyphs, which then could be used to render text.\r\nThe project CSharpGL.Font2Picture in :open_file_folder:`Infrastructure` is a quick tool converting TTF files to pictures along with a xml config file.\r\n\r\n![export-glyph-texture-from-TTF](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/glyph-texture.png?raw=true)\r\n# :gem:Some Cool Demos\r\n## Image Processing Using Compute Shader.\r\n![compute-shader-image-processing](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/compute-shader-edge-detection.gif?raw=true)\r\n## Raycast Volume Rendering.\r\n![raycast-volume-rendering](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/raycast-volume-render.gif?raw=true)\r\n## Particle Simulator Using Compute Shader.\r\n![compute-shader-particles](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/compute-shader-particles.gif?raw=true)\r\n## Order-Dependent Transparency VS Order-Independent Transparency.\r\n![order-independent-transparency](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/order-independent-transparency.jpg?raw=true)\r\n## Point Sprite.\r\n10000 particles with a sphere insied a cube.\r\n![point-sprite](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/point-sprite.jpg?raw=true)\r\n## Earth.\r\nAn earth model that singly rotate same as real earth. It's composed of 65341 positions, normals and uvs and 130140 indexes and a 10800x5400 texture.\r\n![earth](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/earth.gif?raw=true)\r\n## :id::100:Billboard\r\nBillboard can be used to display health-bar, damage numbers in game application.\r\n![billboard-health-bar-text](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/billboard-health-bar-text.png?raw=true)\r\n## :movie_camera:Scene Editor\r\nUseful tool to build a scene and feels how opengl's transform system works.\r\n![CSharpGL-Scene-Editor](https://github.com/bitzhuwei/CSharpGL/blob/gh-pages/images/CSharpGL/CSharpGL-Scene-Editor.jpg?raw=true)\r\n# :question:Support or Contact\r\nCheck my blog [here](http://www.cnblogs.com/bitzhuwei/) or join my QQ Group<a target=\"_blank\" href=\"http://shang.qq.com/wpa/qunwpa?idkey=98131e619f6da03b96ad2213a1278da4fdd05b42a58d053125ce6ba76cf991f9\"><img border=\"0\" src=\"http://pub.idqqimg.com/wpa/images/group.png\" alt=\"开源CSharpGL群 (C#+OpenGL)\" title=\"CSharpGL (C#+OpenGL)\"></a>.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}